{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","TodoList","tasks","map","t","id","isDone","changeTaskStatus","type","checked","changeTaskTitle","removeTask","changeTodoListTitle","removeTodoList","addTask","filter","changeTodoListFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","taskId","todoListID","newTask","newFilterValue","tl","getTasksForTodoList","todoList","updatedTasks","updatedTodoLists","newTodoListID","newTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0QA+CeA,MAzCf,SAAqBC,GAA8B,IAAD,EACpBC,mBAAiB,IADG,mBACvCC,EADuC,KAChCC,EADgC,OAEpBF,mBAAwB,IAFJ,mBAEvCG,EAFuC,KAEhCC,EAFgC,KAWxCC,EAAU,WACRJ,EAAMK,QACNP,EAAMM,QAAQJ,GACdC,EAAS,KAETE,EAAS,sBAWjB,OACI,6BACI,2BAAOG,MAAON,EACPO,SA1BK,SAACC,GACjBL,EAAS,MACTF,EAASO,EAAEC,cAAcH,QAyBdI,WAXW,SAACF,GACvBL,EAAS,IACK,UAAVK,EAAEG,KACFP,KASOQ,UAAWV,EAAQ,cAAgB,KAE1C,4BAAQW,QAAST,GAAjB,KACCF,GAAS,yBAAKU,UAAW,iBAAkBV,KCVzCY,MAxBf,SAAsBhB,GAA+B,IAAD,EAChBC,oBAAS,GADO,mBACzCgB,EADyC,KAC/BC,EAD+B,OAEtBjB,mBAAiBD,EAAME,OAFD,mBAEzCA,EAFyC,KAElCC,EAFkC,KAYhD,OACIc,EACM,2BACET,MAAON,EACPO,SAPQ,SAACC,GAAD,OAAsCP,EAASO,EAAEC,cAAcH,QAQvEW,WAAS,EACTC,OAdQ,WAChBF,GAAY,GACZlB,EAAMqB,YAAYnB,MAcZ,0BAAMoB,cAjBG,kBAAMJ,GAAY,KAiBOlB,EAAME,QC4CvCqB,MAnDf,SAAkBvB,GACd,IAAMwB,EAAQxB,EAAMwB,MAAMC,KAAI,SAAAC,GAK1B,OACI,wBAAIb,IAAKa,EAAEC,GAAIb,UAAWY,EAAEE,OAAS,UAAY,IAC7C,2BAAOb,QALU,kBAAMf,EAAM6B,iBAAiBH,EAAEC,GAAI3B,EAAM2B,KAKxBG,KAAK,WAAWC,QAASL,EAAEE,SAC7D,kBAAC,EAAD,CAAc1B,MAAOwB,EAAExB,MAAOmB,YALd,SAACnB,GAAD,OAAmBF,EAAMgC,gBAAgBN,EAAEC,GAAIzB,EAAOF,EAAM2B,OAO5E,4BAAQZ,QATG,kBAAMf,EAAMiC,WAAWP,EAAEC,GAAI3B,EAAM2B,MAS9C,SAeZ,OACI,6BACI,4BACI,kBAAC,EAAD,CAAczB,MAAOF,EAAME,MAAOmB,YALlB,SAACnB,GAAD,OAAmBF,EAAMkC,oBAAoBhC,EAAOF,EAAM2B,OAM1E,4BAAQZ,QAVG,kBAAMf,EAAMmC,eAAenC,EAAM2B,MAU5C,MAGJ,kBAAC,EAAD,CAAarB,QAXL,SAACJ,GAAD,OAAmBF,EAAMoC,QAAQlC,EAAOF,EAAM2B,OAYtD,4BACKH,GAEL,6BACI,4BAAQV,UAA4B,QAAjBd,EAAMqC,OAAmB,gBAAkB,GAAItB,QArBpD,kBAAMf,EAAMsC,qBAAqB,MAAOtC,EAAM2B,MAqB5D,OAEA,4BAAQb,UAA4B,WAAjBd,EAAMqC,OAAsB,gBAAkB,GACzDtB,QAvBS,kBAAMf,EAAMsC,qBAAqB,SAAUtC,EAAM2B,MAsBlE,UAGA,4BAAQb,UAA4B,cAAjBd,EAAMqC,OAAyB,gBAAkB,GAC5DtB,QAzBY,kBAAMf,EAAMsC,qBAAqB,YAAatC,EAAM2B,MAwBxE,gB,QC6EDY,MApHf,WAAgB,IAAD,EACLC,EAAeC,cACfC,EAAeD,cAFV,EAIuBxC,mBAA8B,CAC5D,CAAC0B,GAAIa,EAActC,MAAO,gBAAiBmC,OAAQ,OACnD,CAACV,GAAIe,EAAcxC,MAAO,cAAemC,OAAQ,SAN1C,mBAIJM,EAJI,KAIOC,EAJP,OASe3C,oBAAQ,mBAC7BuC,EAAe,CACZ,CAACb,GAAIc,cAAMvC,MAAO,OAAQ0B,QAAQ,GAClC,CAACD,GAAIc,cAAMvC,MAAO,MAAO0B,QAAQ,GACjC,CAACD,GAAIc,cAAMvC,MAAO,QAAS0B,QAAQ,KAJT,cAM7Bc,EAAe,CACZ,CAACf,GAAIc,cAAMvC,MAAO,OAAQ0B,QAAQ,GAClC,CAACD,GAAIc,cAAMvC,MAAO,QAAS0B,QAAQ,GACnC,CAACD,GAAIc,cAAMvC,MAAO,QAAS0B,QAAQ,KATT,IATvB,mBASJJ,EATI,KASGqB,EATH,KAsBX,SAASZ,EAAWa,EAAgBC,GAChCvB,EAAMuB,GAAcvB,EAAMuB,GAAYV,QAAO,SAAAX,GAAC,OAAIA,EAAEC,KAAOmB,KAC3DD,EAAS,eAAIrB,IAGjB,SAASY,EAAQlC,EAAe6C,GAC5B,IAAMC,EAAoB,CAACrB,GAAIc,cAAMvC,MAAOA,EAAO0B,QAAQ,GAE3DiB,EAAS,2BACFrB,GADC,kBAEHuB,EAFG,CAEWC,GAFX,mBAEuBxB,EAAMuB,QAIzC,SAAST,EAAqBW,EAAiCF,GAC3DH,EAAaD,EAAUlB,KAAI,SAAAyB,GAAE,OAAIA,EAAGvB,KAAOoB,EAAV,2BAA2BG,GAA3B,IAA+Bb,OAAQY,IAAkBC,MAG9F,SAASC,EAAoBC,GACzB,OAAQA,EAASf,QACb,IAAK,SACD,OAAOb,EAAM4B,EAASzB,IAAIU,QAAO,SAAAX,GAAC,OAAKA,EAAEE,UAC7C,IAAK,YACD,OAAOJ,EAAM4B,EAASzB,IAAIU,QAAO,SAAAX,GAAC,OAAIA,EAAEE,UAC5C,QACI,OAAOJ,EAAM4B,EAASzB,KAIlC,SAASE,EAAiBiB,EAAgBC,GACtC,IAAMM,EAAe7B,EAAMuB,GAAYtB,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAOmB,EAAT,2BAAsBpB,GAAtB,IAAyBE,QAASF,EAAEE,SAAUF,KAE9FmB,EAAS,2BACFrB,GADC,kBAEHuB,EAAaM,KAItB,SAASrB,EAAgBc,EAAgB5C,EAAe6C,GACpD,IAAMM,EAAe7B,EAAMuB,GAAYtB,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAOmB,EAAT,2BAAsBpB,GAAtB,IAAyBxB,UAASwB,KAElFmB,EAAS,2BACFrB,GADC,kBAEHuB,EAAaM,KAItB,SAASlB,EAAeY,GACpB,IAAMO,EAAmBX,EAAUN,QAAO,SAAAa,GAAE,OAAIA,EAAGvB,KAAOoB,KAE1DH,EAAaU,UACN9B,EAAMuB,GAajB,SAASb,EAAoBhC,EAAe6C,GACxC,IAAMO,EAAmBX,EAAUlB,KAAI,SAAAyB,GAAE,OAAIA,EAAGvB,KAAOoB,EAAV,2BAA2BG,GAA3B,IAA+BhD,UAASgD,KACrFN,EAAaU,GAGjB,OACI,yBAAKxC,UAAU,OACX,kBAAC,EAAD,CAAaR,QAjBrB,SAAqBJ,GACjB,IAAMqD,EAAgBd,cAChBe,EAA4B,CAC9B7B,GAAI4B,EAAerD,QAAOmC,OAAQ,OAGtCO,EAAa,GAAD,mBAAKD,GAAL,CAAgBa,KAC5BX,EAAS,2BAAIrB,GAAL,kBAAa+B,EAAgB,SAa7BZ,EAAUlB,KAAI,SAAAyB,GAAE,OACZ,kBAAC,EAAD,CACIrC,IAAKqC,EAAGvB,GACRA,GAAIuB,EAAGvB,GACPzB,MAAOgD,EAAGhD,MACVsB,MAAO2B,EAAoBD,GAC3BZ,qBAAsBA,EACtBL,WAAYA,EACZG,QAASA,EACTC,OAAQa,EAAGb,OACXR,iBAAkBA,EAClBM,eAAgBA,EAChBH,gBAAiBA,EACjBE,oBAAqBA,SCzHzBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApE,GACLqE,QAAQrE,MAAMA,EAAMsE,a","file":"static/js/main.08bcf813.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(\"\")\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const errorMessage = error ? <div className={\"error-message\"}>{error}</div> : null\r\n\r\n    const addItem = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(\"\")\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input value={title}\r\n                   onChange={changeTitle}\r\n                   onKeyPress={onKeyPressAddItem}\r\n                   className={error ? \"error-input\" : \"\"}\r\n            />\r\n            <button onClick={addItem}>+</button>\r\n            {error && <div className={\"error-message\"}>{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                value={title}\r\n                onChange={changeTitle}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport {FilterValueType, TaskType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeTodoListFilter: (newFilterValue: FilterValueType, todoListID: string) => void\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    filter: FilterValueType\r\n    changeTaskStatus: (taskId: string, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    const tasks = props.tasks.map(t => {\r\n        const removeTask = () => props.removeTask(t.id, props.id)\r\n        const changeTaskStatus = () => props.changeTaskStatus(t.id, props.id)\r\n        const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.id)\r\n\r\n        return (\r\n            <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                <input onClick={changeTaskStatus} type=\"checkbox\" checked={t.isDone}/>\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                {/*<span>{t.title}</span>*/}\r\n                <button onClick={removeTask}>X</button>\r\n            </li>\r\n        )\r\n    })\r\n\r\n\r\n    const setAllFilterValue = () => props.changeTodoListFilter('all', props.id)\r\n    const setActiveFilterValue = () => props.changeTodoListFilter('active', props.id)\r\n    const setCompletedFilterValue = () => props.changeTodoListFilter('completed', props.id)\r\n    const removeTodoList = () => props.removeTodoList(props.id)\r\n\r\n    const AddTask = (title: string) => props.addTask(title, props.id)\r\n\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.id)\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <button onClick={removeTodoList}>X</button>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={AddTask}/>\r\n            <ul>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === \"all\" ? \"active-filter\" : \"\"} onClick={setAllFilterValue}>All\r\n                </button>\r\n                <button className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                        onClick={setActiveFilterValue}>Active\r\n                </button>\r\n                <button className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                        onClick={setCompletedFilterValue}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from \"react\";\r\nimport \"./App.css\";\r\nimport TodoList from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n};\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListID_2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false}\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Bread\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false}\r\n        ]\r\n    })\r\n\r\n    function removeTask(taskId: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: [newTask, ...tasks[todoListID]]\r\n        })\r\n    }\r\n\r\n    function changeTodoListFilter(newFilterValue: FilterValueType, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter: newFilterValue} : tl))\r\n    }\r\n\r\n    function getTasksForTodoList(todoList: TodoListType): Array<TaskType> {\r\n        switch (todoList.filter) {\r\n            case \"active\":\r\n                return tasks[todoList.id].filter(t => !t.isDone);\r\n            case \"completed\":\r\n                return tasks[todoList.id].filter(t => t.isDone);\r\n            default:\r\n                return tasks[todoList.id];\r\n        }\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, todoListID: string) {\r\n        const updatedTasks = tasks[todoListID].map(t => t.id === taskId ? {...t, isDone: !t.isDone} : t)\r\n\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: updatedTasks\r\n        })\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, title: string, todoListID: string) {\r\n        const updatedTasks = tasks[todoListID].map(t => t.id === taskId ? {...t, title} : t)\r\n\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: updatedTasks\r\n        })\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        const updatedTodoLists = todoLists.filter(tl => tl.id !== todoListID)\r\n\r\n        setTodoLists(updatedTodoLists)\r\n        delete tasks[todoListID]\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListID, title, filter: 'all'\r\n        }\r\n\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n\r\n    function changeTodoListTitle(title: string, todoListID: string) {\r\n        const updatedTodoLists = todoLists.map(tl => tl.id === todoListID ? {...tl, title} : tl)\r\n        setTodoLists(updatedTodoLists)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList} />\r\n\r\n            {\r\n                todoLists.map(tl =>\r\n                    <TodoList\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={getTasksForTodoList(tl)}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        removeTask={removeTask}\r\n                        addTask={addTask}\r\n                        filter={tl.filter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />)\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}